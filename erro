def input_agent(state: dict) -> dict:
    dialog = state.get("dialog", [])
    last_input = state.get("last_input", "")

    prompt = f""" 
    [your same prompt here... truncated for brevity]
    Dialog so far:
    {dialog}

    New input from user:
    {last_input}
    """
    
    try:
        response = llm.invoke([HumanMessage(content=prompt)])
        raw_output = response.content.strip()

        # Log raw output for debugging
        logger.info(f"üîé Gemini raw output: {raw_output}")

        # Try to extract JSON content
        if "```json" in raw_output:
            cleaned = raw_output.split("```json")[-1].split("```")[0].strip()
        elif raw_output.startswith("{") and raw_output.endswith("}"):
            cleaned = raw_output
        else:
            raise ValueError("No valid JSON block found in Gemini response")

        parsed = json.loads(cleaned)

        # Append messages
        dialog.append({"role": "user", "content": last_input})
        if parsed.get("status") == "incomplete":
            dialog.append({"role": "assistant", "content": parsed.get("next_question", "")})

        return {
            "dialog": dialog,
            "final_problem_statement": parsed.get("final_problem_statement", ""),
            "status": parsed.get("status", "incomplete"),
            "next_question": parsed.get("next_question", ""),
            "last_input": ""
        }

    except Exception as e:
        logger.error("‚ö†Ô∏è Failed to parse Gemini response", exc_info=True)
        dialog.append({"role": "user", "content": last_input})
        return {
            "dialog": dialog,
            "status": "error",
            "message": f"Gemini returned invalid output. Error: {str(e)}",
            "final_problem_statement": "",
            "next_question": "",
            "last_input": ""
        }
