import operator
import os
import json
import requests
from typing import Annotated, TypedDict
from datetime import datetime # Import datetime for current time

from langchain_core.messages import BaseMessage, HumanMessage, AIMessage, ToolMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.tools import tool
from langchain_google_genai import ChatGoogleGenerativeAI
from langgraph.graph import StateGraph, END
from langgraph.prebuilt import create_react_agent

# --- API Keys (IMPORTANT: Load from environment variables) ---
RAPIDAPI_KEY = os.environ.get("RAPIDAPI_KEY")
OPENWEATHERMAP_API_KEY = os.environ.get("OPENWEATHERMAP_API_KEY")
GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")

if not RAPIDAPI_KEY:
    raise ValueError("RAPIDAPI_KEY environment variable not set.")
if not OPENWEATHERMAP_API_KEY:
    raise ValueError("OPENWEATHERMAP_API_KEY environment variable not set.")
if not GOOGLE_API_KEY:
    raise ValueError("GOOGLE_API_KEY environment variable not set.")


llm = ChatGoogleGenerativeAI(model="gemini-2.5-flash-preview-05-20", google_api_key=GOOGLE_API_KEY, temperature=0.2)

# --- Global Context (Current Time and Location) ---
# Generate current time and location context once when the script starts
current_time = datetime.now().strftime("%A, %B %d, %Y at %I:%M:%S %p %Z")
current_location = "United States"
global_context_message = f"Current time is {current_time}. Remember the current location is {current_location}."


# 1. Define the Graph State
class AgentState(TypedDict):
    messages: Annotated[list[BaseMessage], operator.add]

# --- Tools ---
@tool
def get_current_weather(city: str, units: str = "metric") -> str:
    """
    Fetches the current weather conditions for a specified city using OpenWeatherMap.
    Returns temperature, main weather condition, and description.

    Args:
        city (str): The name of the city (e.g., "London", "New York", "Chennai").
        units (str): The unit system for temperature. 'metric' for Celsius (default),
                     'imperial' for Fahrenheit, or 'standard' for Kelvin.
    """
    base_url = "https://api.openweathermap.org/data/2.5/weather"
    params = {
        "q": city,
        "units": units,
        "appid": OPENWEATHERMAP_API_KEY
    }
    try:
        response = requests.get(base_url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()

        if data.get("cod") == 200:
            main_data = data.get("main", {})
            weather_data = data.get("weather", [{}])[0]
            temp = main_data.get("temp")
            feels_like = main_data.get("feels_like")
            humidity = main_data.get("humidity")
            description = weather_data.get("description")
            main_condition = weather_data.get("main")
            city_name_from_api = data.get("name")

            return (
                f"Current weather in {city_name_from_api}: "
                f"{temp}{unit_symbol} (feels like {feels_like}{unit_symbol}), "
                f"Conditions: {main_condition} - {description}, "
                f"Humidity: {humidity}%."
            )
        else:
            return f"Error from OpenWeatherMap API for {city}: {data.get('message', 'Unknown error')} (Code: {data.get('cod')})"
    except requests.exceptions.HTTPError as e:
        status_code = e.response.status_code
        if status_code == 404:
            return f"City '{city}' not found by OpenWeatherMap. Please check the spelling."
        elif status_code == 401:
            return "OpenWeatherMap API Key is invalid or expired. Please check your key."
        else:
            return f"HTTP error from OpenWeatherMap API for {city}: {status_code} - {e.response.text}"
    except requests.exceptions.ConnectionError as e:
        return f"Connection error to OpenWeatherMap API: {e}. Please check your internet connection."
    except requests.exceptions.Timeout as e:
        return f"Timeout error with OpenWeatherMap API: {e}. The request took too long to respond."
    except json.JSONDecodeError:
        return f"Failed to decode JSON from OpenWeatherMap API response for {city}. Response was: {response.text[:200]}..."
    except Exception as e:
        return f"An unexpected error occurred with OpenWeatherMap API for {city}: {type(e).__name__} - {e}"

@tool
def get_country_detail(country_name: str) -> str:
    """
    Fetches details about a country using the RapidAPI GeoDB API.
    Note: Currently supports only a limited set of countries with hardcoded codes.
    If the input seems like a city, it will suggest that.
    """
    headers = CaseInsensitiveDict()
    headers["x-rapidapi-host"] = "wft-geo-db.p.rapidapi.com"
    headers["x-rapidapi-key"] = RAPIDAPI_KEY

    country_code = {
        "India": "IN", "United States": "US", "United Kingdom": "GB",
        "Canada": "CA", "Australia": "AU", "Germany": "DE",
        "France": "FR", "Japan": "JP", "China": "CN",
        "Brazil": "BR", "South Africa": "ZA", "Mexico": "MX",
        "Spain": "ES", "Italy": "IT", "Russia": "RU",
        "Egypt": "EG", "Argentina": "AR", "South Korea": "KR",
        "New Zealand": "NZ", "Sweden": "SE", "Norway": "NO",
        "Denmark": "DK", "Finland": "FI", "Switzerland": "CH",
        "Netherlands": "NL", "Belgium": "BE", "Austria": "AT",
        "Portugal": "PT", "Greece": "GR", "Turkey": "TR",
        "Saudi Arabia": "SA", "United Arab Emirates": "AE"
    }

    is_likely_city = False
    if len(country_name.split()) == 1 and country_name.lower() not in [k.lower() for k in country_code.keys()]:
        is_likely_city = True

    actual_country_name = next((key for key in country_code if key.lower() == country_name.lower()), None)

    if not actual_country_name:
        if is_likely_city:
            return f"'{country_name}' appears to be a city, not a country. I can only provide details for countries. For example, 'India' or 'United States'."
        else:
            return f"I cannot find country details for '{country_name}'. Please ensure it is a recognized country name from the supported list: {', '.join(country_code.keys())}"


    cntry_name_shrt_code = country_code[actual_country_name]
    url = f"https://wft-geo-db.p.rapidapi.com/v1/geo/countries/{cntry_name_shrt_code}"

    try:
        res = requests.get(url, headers=headers, timeout=10)
        res.raise_for_status()

        data = res.json()["data"]
        callingcode = data.get("callingCode", "N/A")
        currency = data["currencyCodes"][0] if data.get("currencyCodes") else "N/A"
        numberofregion = data.get("numRegions", "N/A")
        flaguri = data.get("flagImageUri", "N/A")

        return (f"The currency in {actual_country_name} is {currency} with calling code {callingcode}, "
                  f"number of regions {numberofregion} and flag image {flaguri}")

    except requests.exceptions.HTTPError as e:
        status_code = e.response.status_code
        if status_code == 404:
            return f"Country '{actual_country_name}' not found by GeoDB API. Please check the spelling or if it's supported."
        elif status_code == 401:
            return "RapidAPI Key is invalid or expired. Please check your key."
        else:
            return f"HTTP error from RapidAPI GeoDB for {actual_country_name}: {status_code} - {e.response.text}"
    except requests.exceptions.ConnectionError as e:
        return f"Connection error to RapidAPI GeoDB: {e}. Please check your internet connection."
    except requests.exceptions.Timeout as e:
        return f"Timeout error with RapidAPI GeoDB: {e}. The request took too long to respond."
    except json.JSONDecodeError:
        return f"Failed to decode JSON from RapidAPI GeoDB API response for {actual_country_name}. Response was: {res.text[:200]}..."
    except KeyError as e:
        return f"Missing expected data in RapidAPI GeoDB response for {actual_country_name}: '{e}' key not found. Response: {res.json()}"
    except Exception as e:
        return f"An unexpected error occurred in get_country_detail for {actual_country_name}: {type(e).__name__} - {e}"


# 2. Create Worker Agents (still using create_react_agent as sub-graphs)
weather_agent_node = create_react_agent(
    model=llm,
    tools=[get_current_weather],
    prompt=ChatPromptTemplate.from_messages([
        ("system",
         f"{global_context_message}\n\n" # Added global context
         "You are a helpful weather assistant. Your sole purpose is to provide current weather information using the 'get_current_weather' tool. When asked about weather, use this tool. If the tool call is successful, respond with the weather information. If the tool fails or cannot find the city, clearly state that you couldn't get the weather for the specified location. Never answer questions outside of weather. If the user asks something not related to weather, respond with 'I can only provide current weather information.'"),
        ("human", "{messages}"),
    ]),
    name="weather_agent",
)

country_agent_node = create_react_agent(
    model=llm,
    tools=[get_country_detail],
    prompt=ChatPromptTemplate.from_messages([
        ("system",
         f"{global_context_message}\n\n" # Added global context
         "You are a helpful country information assistant. Your sole purpose is to provide details about countries using the 'get_country_detail' tool. When asked about a country, use this tool. If the tool call is successful, respond with the country details. If the tool fails or cannot find the country, clearly state that you couldn't get details for the specified country (e.g., 'I couldn't find details for X, it might be a city or not supported.'). Never answer questions outside of country information. If the user asks something not related to countries, respond with 'I can only provide country details.'"),
        ("human", "{messages}"),
    ]),
    name="country_agent",
)


# --- Custom Router Node ---
routing_llm = ChatGoogleGenerativeAI(model="gemini-2.5-flash-preview-05-20", google_api_key=GOOGLE_API_KEY, temperature=0.1)

router_prompt = ChatPromptTemplate.from_messages([
    ("system",
     f"{global_context_message}\n\n" # Added global context
     "You are a sophisticated routing assistant. Your task is to determine the intent of the user's query "
     "and select the appropriate next step. Respond ONLY with the name of the chosen route.\n\n"
     "Available routes:\n"
     "- `weather_agent`: Use if the user asks for current weather information.\n"
     "- `country_agent`: Use if the user asks for country details (e.g., currency, calling code, number of regions, flag).\n"
     "- `general_greeting`: Use for simple greetings like 'Hi', 'Hello', 'Hey', 'Good morning', 'Good evening'.\n"
     "- `unsupported_query`: Use for any query not covered by the above, or if the intent is unclear.\n\n"
     "Example Input: 'What is the weather in London?'\nExample Output: weather_agent\n\n"
     "Example Input: 'Tell me about India'\nExample Output: country_agent\n\n"
     "Example Input: 'Hi there!'\nExample Output: general_greeting\n\n"
     "Example Input: 'Tell me a joke.'\nExample Output: unsupported_query\n\n"
     "Your response must be one of the route names exactly, with no other text."
    ),
    ("human", "{messages}")
])

router = router_prompt | routing_llm

def route_query(state: AgentState) -> str:
    """
    Decides which agent to call based on the user's last message.
    """
    messages = state['messages']
    last_message = messages[-1]

    if isinstance(last_message, HumanMessage):
        response = router.invoke({"messages": last_message.content})
        decision = response.content.strip()
        return decision
    return "unsupported_query"

def handle_greeting(state: AgentState) -> AgentState:
    """Generates a standard greeting."""
    greeting_message = AIMessage(content="Hello! How can I assist you today? I can provide current weather information or country details.")
    return {"messages": [greeting_message]}

def handle_unsupported(state: AgentState) -> AgentState:
    """Generates a fallback for unsupported queries."""
    unsupported_message = AIMessage(content="I'm sorry, I can only provide current weather information or country details. Please try asking a question related to those topics.")
    return {"messages": [unsupported_message]}

def handle_agent_output(state: AgentState) -> AgentState:
    """
    This node processes the output of an agent (weather_agent or country_agent).
    It checks if the agent's final message indicates a success or an error.
    """
    last_message = state["messages"][-1]
    if isinstance(last_message, AIMessage) and last_message.content:
        content = last_message.content.lower()
        # Keywords indicating failure from our tools/agents
        error_keywords = ["not found", "error", "cannot find", "couldn't get", "invalid", "expired", "appears to be a city", "failed to decode", "unexpected error", "connection error", "timeout error"]

        # Check if the agent's output contains an error keyword
        for keyword in error_keywords:
            if keyword in content:
                # If it's an error, construct a specific AIMessage to relay it
                error_response = AIMessage(content=last_message.content)
                return {"messages": [error_response]}
        
        # If no error keywords, assume success and return the agent's message as is
        return {"messages": [last_message]}
    
    # Fallback if agent didn't produce a clear AIMessage
    return {"messages": [AIMessage(content="An unexpected response was received from the agent.")]}


# --- Build the StateGraph ---
workflow = StateGraph(AgentState)

# Add nodes for each agent and our custom handlers
workflow.add_node("router", route_query)
workflow.add_node("weather_agent", weather_agent_node)
workflow.add_node("country_agent", country_agent_node)
workflow.add_node("general_greeting_handler", handle_greeting)
workflow.add_node("unsupported_query_handler", handle_unsupported)
workflow.add_node("agent_output_handler", handle_agent_output)

# Define the entry point
workflow.set_entry_point("router")

# Define edges from the router
workflow.add_conditional_edges(
    "router",
    lambda x: x,
    {
        "weather_agent": "weather_agent",
        "country_agent": "country_agent",
        "general_greeting": "general_greeting_handler",
        "unsupported_query": "unsupported_query_handler",
    }
)

# Define edges from the specialized agents
workflow.add_edge("weather_agent", "agent_output_handler")
workflow.add_edge("country_agent", "agent_output_handler")

# From agent_output_handler, we always go to END
workflow.add_edge("agent_output_handler", END)

# From the greeting and unsupported handlers, we also go to END
workflow.add_edge("general_greeting_handler", END)
workflow.add_edge("unsupported_query_handler", END)


# Compile the graph
app = workflow.compile()


print("=== AI Supervisor Agent (Custom Graph) ===")
print("Type your query (or type 'exit' to quit)\n")

while True:
    user_input = input("You: ")
    if user_input.strip().lower() in ["exit", "quit"]:
        print("Goodbye!")
        break

    input_state = {"messages": [HumanMessage(content=user_input)]}

    print("AI:")
    try:
        final_response_content = None

        for s in app.stream(input_state):
            if END in s:
                messages_at_end = s[END].get("messages", [])
                if messages_at_end:
                    last_message = messages_at_end[-1]
                    if isinstance(last_message, AIMessage) and last_message.content.strip():
                        final_response_content = last_message.content
                    elif (isinstance(last_message, HumanMessage) or isinstance(last_message, ToolMessage)) and last_message.content.strip():
                         final_response_content = last_message.content
                break

        if final_response_content:
            print(final_response_content)
        else:
            print("I'm sorry, I couldn't process your request. The system did not yield a final response. Please try rephrasing it or ask a different question.")

    except Exception as e:
        print(f"An unexpected error occurred while processing your query: {e}")
        import traceback
        traceback.print_exc()

    print("\n--- Ask another question ---\n")
