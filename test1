print("=== AI Supervisor Agent ===")
print("Type your query (or type 'exit' to quit)\n")

while True:
    user_input = input("You: ")
    if user_input.strip().lower() in ["exit", "quit"]:
        print("Goodbye!")
        break

    input_state = {"messages": [HumanMessage(content=user_input)]}

    print("AI:")
    try:
        final_response_content = None

        # The stream will yield states. The final state (when the graph ends) will have the 'END' key.
        for s in app.stream(input_state):
            # Check for the 'END' key, which indicates the final output of the graph.
            if END in s:
                # The messages list in the END state holds the complete conversation history
                # that led to the graph ending. The last message is usually the final response.
                messages_at_end = s[END].get("messages", [])
                if messages_at_end:
                    last_message = messages_at_end[-1]
                    # We are primarily interested in AIMessage content as the final output.
                    # If the final message is an AIMessage, use its content.
                    if isinstance(last_message, AIMessage) and last_message.content.strip():
                        final_response_content = last_message.content
                    # In some very specific edge cases (e.g., supervisor directly returning a tool error),
                    # the last message might be a HumanMessage or ToolMessage, but ideally,
                    # the supervisor should wrap these in an AIMessage for the user.
                    # We'll explicitly check for AIMessage for cleaner output.
                break # Exit loop once END is found, as we only care about the final state.

        if final_response_content:
            print(final_response_content)
        else:
            # Fallback for truly unexpected empty responses or if END state doesn't have a final AIMessage.
            # With the improved supervisor prompt, this should be rare for valid inputs.
            print("I'm sorry, I couldn't process your request. Please try rephrasing it or ask a different question.")

    except Exception as e:
        print(f"An unexpected error occurred while processing your query: {e}")
        # import traceback # Uncomment for full traceback if needed
        # traceback.print_exc()

    print("\n--- Ask another question ---\n")
